openapi: 3.0.0

info:
  title: Checkout Service API
  license:
    name: Apache 2.0
    url: www.apache.org/licenses/LICENSE-2.0.html
  description: An API that exposes checkout functionality
  contact:
    name: David Molinero
    url: https://github.com/doktor500
    email: davidmolinero.com@gmail.com
  version: 1.0.0

servers:
  - url: https://api.kenfos.co.uk
    description: Production environment

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization

  schemas:
    Id:
      type: string
      minLength: 1
      maxLength: 36

    Amount:
      type: object
      properties:
        value:
          type: number
          example: 99.99
        currency:
          type: string
          example: EUR
          enum:
            - EUR
      required:
        - value
        - currency
      additionalProperties: false

    Address:
      type: object
      properties:
        country:
          type: string
        city:
          type: string
        postCode:
          type: string
        line1:
          type: string
        line2:
          type: string
      example:
        country: Spain
        city: Madrid
        postCode: "28000"
        line1: Gran via 1
        line2: Portal A
      required:
        - country
        - city
        - postCode
        - line1
      additionalProperties: false

    ShippingMethodRequest:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
      example:
        id: a675fe92-4c06-41a0-a159-bbd19d3a8411
      required:
        - id
      additionalProperties: false

    ShoppingCartItemRequest:
      type: object
      description: A shopping cart item
      properties:
        id:
          $ref: "#/components/schemas/Id"
        quantity:
          type: number
          example: 1
      example:
        id: c8991868-eb34-4148-bc48-8a19c9294d6b
        quantity: 1
      required:
        - id
        - quantity
      additionalProperties: false

    ShoppingCartItemsRequest:
      type: array
      items:
        $ref: "#/components/schemas/ShoppingCartItemRequest"

    ShoppingCart:
      type: object
      description: A shopping cart
      properties:
        id:
          $ref: "#/components/schemas/Id"
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
      example:
        id: aec8b64c-2c49-49cb-8f4c-3b62fb9ce76c
        items:
          - id: cc3cb762-2ccb-4219-b2a9-ad6653d144d2
            quantity: 1
            name: Nike Dunk Low Black and White
            amount:
              value: 99.99
              currency: EUR
            tax:
              value: 19.99
              currency: EUR
      required:
        - id
        - items
      additionalProperties: false

    Item:
      type: object
      description: An item
      properties:
        id:
          $ref: "#/components/schemas/Id"
        quantity:
          type: number
        name:
          type: string
        amount:
          $ref: "#/components/schemas/Amount"
        tax:
          $ref: "#/components/schemas/Amount"
      example:
        id: 5cae5f24-5058-417b-ac9f-68641ed5ad7a
        quantity: 1
        name: Nike Dunk Low Black and White
        amount:
          value: 99.99
          currency: EUR
        tax:
          value: 19.99
          currency: EUR
      required:
        - id
        - quantity
        - name
        - amount
        - tax
      additionalProperties: false

    ShippingMethod:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        carrier:
          type: string
          enum:
            - UPS
          example: UPS
        amount:
          $ref: "#/components/schemas/Amount"
      example:
        id: 7b67db0c-2313-42e2-bf4d-512639f967b7
        carrier: UPS
        amount:
          value: 9.99
          currency: EUR
      required:
        - id
        - carrier
        - amount
      additionalProperties: false

    PaymentMethod:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        type:
          type: string
          enum:
            - CARD
      example:
        id: 096c4bf1-fc8d-47f9-b877-038a2ea29898
        type: CARD
      required:
        - id
        - type
      additionalProperties: false

    Payment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        method:
          $ref: "#/components/schemas/PaymentMethod"
        amount:
          $ref: "#/components/schemas/Amount"
      example:
        id: c777cc81-d6fc-4df5-a7bb-ba6d97affdcf
        method:
          id: 230e2ede-66f2-458a-9280-d73516494a14
          type: CARD
        amount:
          value: 99.99
          currency: EUR
      required:
        - id
        - method
        - amount
      additionalProperties: false

    Order:
      type: object
      description: An order
      properties:
        id:
          $ref: "#/components/schemas/Id"
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        shippingAddress:
          $ref: "#/components/schemas/Address"
        shippingMethod:
          $ref: "#/components/schemas/ShippingMethod"
        payment:
          $ref: "#/components/schemas/Payment"
      example:
        id: e0a1c2f6-cb6d-4357-b7ef-66b7534e282a
        items:
          - id: de1e26e4-0391-449b-8b97-9fad345b35a7
            quantity: 1
            name: Nike Dunk Low Black and White
            amount:
              value: 99.99
              currency: EUR
            tax:
              value: 19.99
              currency: EUR
        shippingAddress:
          country: Spain
          city: Madrid
          postCode: "28000"
          line1: Gran via 1
          line2: Portal A
        shippingMethod:
          id: b0f35c39-56a4-40b2-b168-246cefdbef07
          carrier: UPS
          amount:
            value: 9.99
            currency: EUR
        payment:
          id: f7d5d51d-c19b-4cb0-a94a-2a5a6f54fb87
          method:
            id: 953c16c3-31a4-4190-a82a-da3da66e6baf
            type: CARD
          amount:
            value: 99.99
            currency: EUR
      required:
        - id
        - items
        - shippingAddress
        - shippingMethod
        - payment
      additionalProperties: false

    BadRequestError:
      type: object
      description: An error that is thrown when an the request is invalid
      required:
        - message
      properties:
        message:
          type: string
          example: The request failed validation
      additionalProperties: false

    UnexpectedError:
      type: object
      description: An error that is thrown when something unexpected happens
      required:
        - message
      properties:
        message:
          type: string
          example: An unexpected error has occurred
      additionalProperties: false

    TimeoutError:
      type: object
      description: An errors that is thrown when the service times out
      required:
        - message
      properties:
        message:
          type: string
          example: The request timed out
      additionalProperties: false

  responses:
    NoContent:
      description: A response containing no content in the response body from a create/delete request

    ShoppingCart:
      description: A response containing a shopping cart
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ShoppingCart"

    Order:
      description: A response containing an order
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Order"

    BadRequestError:
      description: A response containing an error when the request is invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestError"

    UnexpectedError:
      description: A response containing an error when something unexpected has happened
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnexpectedError"

    TimeoutError:
      description: A response containing an error when the request times out
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TimeoutError"

paths:
  /api/checkout/cart:
    post:
      description: Create shopping cart
      operationId: create-shopping-cart
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingCartItemsRequest"
      responses:
        "200":
          $ref: "#/components/responses/ShoppingCart"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
        "504":
          $ref: "#/components/responses/TimeoutError"

  /api/checkout/cart/{cartId}:
    get:
      description: Get shopping cart
      operationId: get-shopping-cart
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          $ref: "#/components/responses/ShoppingCart"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
        "504":
          $ref: "#/components/responses/TimeoutError"

  /api/checkout/cart/{cartId}/items:
    post:
      description: Add shopping cart items
      operationId: add-shopping-cart-items
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingCartItemsRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
        "504":
          $ref: "#/components/responses/TimeoutError"

    delete:
      description: Delete shopping cart items
      operationId: delete-shopping-cart-items
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingCartItemsRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
        "504":
          $ref: "#/components/responses/TimeoutError"

  /api/checkout/cart/{cartId}/shippingAddress:
    post:
      description: Add shipping address
      operationId: add-shipping-address
      security:
          - ApiKeyAuth: [ ]
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
        "504":
          $ref: "#/components/responses/TimeoutError"

  /api/checkout/cart/{cartId}/shippingMethod:
    post:
      description: Add shipping method
      operationId: add-shipping-method
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShippingMethodRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
        "504":
          $ref: "#/components/responses/TimeoutError"

  /api/checkout/orders/{orderId}:
    get:
      description: Get order
      operationId: get-order
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          $ref: "#/components/responses/Order"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
        "504":
          $ref: "#/components/responses/TimeoutError"
